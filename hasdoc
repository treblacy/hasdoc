#!/bin/sh

helpmsg() {
    cat <<EOF
Usage: $0 [OPTION]... NAME...
Find locally built Haskell library documentations (the html files)
from the GHC installation and the cabal store,
given package names or module names.
Open in web browser (using xdg-open) or print filenames.

NAMEs are package names, unless -m is specified.

If package name: the newest version is selected, and its index.html is
returned. You can still select a particular version number by including it in
the package name, e.g., acme-dont-1.1.

If module name: all newest-version packages that have docs for that module are
selected, and their Module-Name.html's are returned. Current bug in rare cases:
If the module is in older versions only, this program won't find it.

Options:
  -h          This help message.
  -g VERSION  Manually specify GHC version.
              It is OK to specify a partial version number, e.g., 8.8,
              provided that "ghc-8.8 --numeric-version" works. If it reports
              8.8.4 for example, then 8.8.4 is used.
  -p          NAMEs are package names (default).
  -m          NAMEs are module names.
  -w          ("view") xdg-open documentation files in web browser (default).
  -l          ("list") Print documentation filenames to stdout.
EOF
}

errmsgabort() {
    echo "$1" >&2
    exit 1
}

names=p    # p for package names, or m for module names
action=v   # v for view, or l for list

while getopts :g:hpmwl f; do
    case $f in
        g)
            gv=$OPTARG
            ;;
        h)
            helpmsg
            exit 0
            ;;
        p)
            names=p
            ;;
        m)
            names=m
            ;;
        w)
            action=v
            ;;
        l)
            action=l
            ;;
        *)
            errmsgabort "$0: invalid option $1. Please use -h for usage."
    esac
done
shift `expr $OPTIND - 1`

[ $# -gt 0 ] || errmsgabort "$0: need package/module names. Please use -h for usage."

if [ -z "$gv" ]; then
   gv=$(ghc --numeric-version)
else
   gv=$(ghc-"$gv" --numeric-version)
   # This is not idempotent. The user may specify 8.8 for example, and we still
   # need to elaborate that to 8.8.4.
fi
ghcpkg="ghc-pkg-$gv"
db="$HOME/.cabal/store/ghc-$gv/package.db"

# From module name in $1, find package name(s), then call pkg below.
mod() {
    m="$1"
    uniqpkgs=$($ghcpkg --simple-output --names-only --global --package-db="$db" \
               find-module "$m" | tr ' ' '\n' | sort | uniq)
    # The ghc-pkg output is space-delimited unversioned package names. There can
    # be duplicates because behind them are multiple versions and builds. Also,
    # this ghc-pkg command never fails, just empty output if nothing found.

    # And as said in the help message, this simple algorithm doesn't work for
    # the case when the module is in older versions only.
    [ -n "$uniqpkgs" ] || { echo "$0: module $m not found." >&2 ; return ; }
    for p in $uniqpkgs ; do
        pkg $p "$1"
    done
}

# From package name in $1, find index.html (if $2 is empty) or <module-name>.html
# (if $2 is non-empty, it is supposed to be a module name).  Then either open in
# browser or print to stdout (based on $action).
pkg() {
    p="$1"
    htmldir=$($ghcpkg --simple-output --global --package-db="$db" field "$p" haddock-html | tail -1)
    if [ -z "$2" ]; then
        html="${htmldir}"/index.html
    else
        html="${htmldir}"/$(echo "$2" | sed 's/\./-/g').html
    fi
    if [ -z "$htmldir" -o ! -f "$html" ]; then
        echo "$0: can't find doc for $p" >&2
    else
        if [ $action = v ]; then
            xdg-open "$html"
        else
            echo "$html"
        fi
    fi
}

for i in "$@"; do
    if [ $names = p ]; then
        pkg "$i"
    else
        mod "$i"
    fi
done
