#!/bin/sh

helpmsg() {
    cat <<EOF
Usage: $0 [OPTION]... NAME...
Find locally built Haskell library documentations (the respective index.html's)
from the cabal store,
given package names or module names.
Open in web browser (using xdg-open) or print filenames.

Default details:

NAMEs are package names, unless -m is specified.

For each package name, the most recently built index.html is selected. You can
still select a particular version number by including it in the package name,
e.g., acme-dont-1.1

For each module name, package names with version numbers are identified, then
each package name is subject to the above.

Options:
  -h    Print this help message and exit.
  -p    NAMEs are package names (default).
  -m    NAMEs are module names. But documentation files reported are still
        at package level, not module level.
  -v    ("view") xdg-open documentation files in web browser (default).
  -l    ("list") Print documentation filenames to stdout.
EOF
}

errmsgabort() {
    echo "$1" >&2
    exit 1
}

names=p    # p for package names, or m for module names
action=v   # v for view, or l for list

while getopts :hpmvl f; do
    case $f in
        h)
            helpmsg
            exit 0
            ;;
        p)
            names=p
            ;;
        m)
            names=m
            ;;
        v)
            action=v
            ;;
        l)
            action=l
            ;;
        *)
            errmsgabort "$0: invalid option $1. Please use -h for usage."
    esac
done
shift `expr $OPTIND - 1`

[ $# -gt 0 ] || errmsgabort "$0: need package/module names. Please use -h for usage."

gv=$(ghc --numeric-version)
g="ghc-$gv"
db="$HOME/.cabal/store/$g/package.db"

# From module name in $1, find package name(s), then call pkg below.
mod() {
    m="$1"
    pkgs=$(ghc-pkg --simple-output --global --package-db="$db" find-module "$m")
    # The output format is space-delimited. Also, never fails, just empty output
    # if nothing found.
    # The output is versioned package names, e.g., acme-dont-1.2. To strip
    # versions, add --names-only.
    [ -n "$pkgs" ] || { echo "$0: module $m not found." >&2 ; return ; }
    uniqpkgs=$(for p in $pkgs ; do echo "$p" ; done | sort | uniq)
    for p in $uniqpkgs ; do
        pkg $p
    done
}

# From package name in $1, find index.html, then either open in browser or print
# to stdout.
pkg() {
    p="$1"
    # To split ghc-pkg newline-delimited output, change IFS for a little while.
    oldIFS="$IFS"
    IFS='
'
    htmls=$(ghc-pkg --simple-output --global --package-db="$db" field "$p" haddock-html | sed 's/$/\/index.html/')
    [ -n "$htmls" ] || return
    html=$(ls -t $htmls 2> /dev/null | head -1)
    IFS="$oldIFS"
    if [ -z "$html" ]; then
        echo "$0: can't find index.html for $p" >&2
    else
        if [ $action = v ]; then
            xdg-open "$html"
        else
            echo "$html"
        fi
    fi
}

for i in "$@"; do
    if [ $names = p ]; then
        pkg "$i"
    else
        mod "$i"
    fi
done
